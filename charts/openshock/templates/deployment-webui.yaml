{{- if .Values.webUi.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ include "openshock.fullname" . }}-webui'
  labels:
    {{- include "openshock.labels" $ | nindent 4 }}
    app.kubernetes.io/component: webui
spec:
  replicas: {{ .Values.webUi.replicaCount }}
  selector:
    matchLabels:
      {{- include "openshock.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: webui
  template:
    metadata:
      {{- with .Values.webUi.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "openshock.labels" $ | nindent 8 }}
        {{- with .Values.webUi.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        app.kubernetes.io/component: webui
    spec:
      {{- with .Values.webUi.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.webUi.podSecurityContext | nindent 8 }}
      automountServiceAccountToken: false
      initContainers:
        - name: init-html
          securityContext:
            {{- toYaml .Values.webUi.securityContext | nindent 12 }}
          image: "{{ .Values.webUi.image.repository }}:{{ .Values.webUi.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.webUi.image.pullPolicy }}
          command: ["/startup.sh"]
          volumeMounts:
            - name: config
              mountPath: "/startup.sh"
              subPath: startup.sh
            - name: html
              mountPath: "/html"
              readOnly: false
      containers:
        - name: webui
          securityContext:
            {{- toYaml .Values.webUi.securityContext | nindent 12 }}
          image: "{{ .Values.webUi.image.repository }}:{{ .Values.webUi.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.webUi.image.pullPolicy }}
          command: ["./docker-entrypoint.sh", "nginx", "-g", "daemon off;"] # bipass startup script that edits files. Using init container instead.
          ports:
            - name: http
              containerPort: {{ .Values.webUi.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.webUi.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.webUi.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.webUi.resources | nindent 12 }}
          volumeMounts:
            - name: html
              mountPath: "/usr/share/nginx/html"
              readOnly: true
            - name: cache
              mountPath: /var/cache/nginx
            - name: tmp
              mountPath: /tmp/nginx
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
      volumes:
        - name: config
          configMap:
            name: '{{ include "openshock.fullname" $ }}-webui'
            items:
              - key: startup.sh
                path: startup.sh
                mode: 0555
              - key: nginx.conf
                path: nginx.conf
              - key: default.conf
                path: default.conf
        - name: html
          emptyDir: {}
        - name: cache
          emptyDir: {}
        - name: tmp
          emptyDir: {} 
      {{- with .Values.webUi.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.webUi.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.webUi.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
